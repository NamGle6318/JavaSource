Util 패키지

1. StringTokenizer 클래스
- 문자열을 지정된 구분자로 분리
- 구분자로 사용할 수 있는 문자는 단 문자만 가능

2. Date 클래스 : 날짜, 시간 출력 (Thu Mar 13 13:05:19 KST 2025)
2-1. SimpleDateFormat 클래스 : Date 출력 형식 지정 (util 패키지는 아님)

3. 컬렉션 프레임워크
- 데이터를 담는 다양한 방법에 대한 클래스(인터페이스) 모음
- java.util.collection
    - List : = 개발자들한테 편한 배열
        - List<E> or T, K, V : 객체 타입이 필요함
        - 순서대로 담기, 인덱스 접근 가능
        - 배열의 불편한점을 시스템이 대신 처리해줌.
        - 구현 클래스 : ArrayList, LinkedList, stack, Queue .....
    -Set : 중복된 요소를 저장하지 않음, 순서가 유지하지 않음(지 맘대로 저장함)
-Map : 알아둬야함

3 List
-List<E> or T, K, V : 객체 타입이 필요함
-List의 구현
    -ArrayList : 배열
    -LinkedList : 리스트를 링크로 연결
        - 순차적으로 추가/삭제 : ArrayList가 더 빠르다. (저장공간 넉넉하게)
        - 중간데이터를 추가/삭제 : LinkedList가 더 빠르다.
    stack
        - 블럭을 쌓는 구조 = LIFO(Last In First Out) : 입구와 출구가 동시에 있음.
    Queue(interface)
        - 자동차 터널 구조 FIFO(First In First Out) : 입구와 출구가 따로 있음.

    Set (Hass = Hassing : hassing하다 -> 입력한 값을 Hass 함수로 뚝딱해서 16진수로 이루어진 해시값이 출력됨(랜덤))
        - equals() + hashcode() 를 이용해 중복여부를 가려냄 ( = true)
        HaseSet
            - 해싱 적용, 순서 유지 하지 않음
        LinkedHashSet
            - 순서유지 + 중복된 요소 저장 X
        TreeSet
            - 중복된 요소 저장 X + 정렬

Map 
    - Collection의 자식이 아님
    - K(Key), V(Value) 구조 사용
    - K만 중복된 요소를 검증
        -HashMap
        -TreeMap

Iterator(interface)
    - Collection에 저장된 요소들을 읽어오는 방법에 대한 표준화
    - List, Set 데이터를 읽어오는 방법과 Map 데이터를 읽어오는 방법이 서로 다름 -> Iterator로 통일화
    - hasNext(), next(), remove()

Arrays(static)
    - 배열과 관련된 유용한 메소드를 제공
    - Arrays.toString() : 배열의 값을 출력
    - Arrays.asList("") : 배열을 리스트로 변환
    - 정렬 : Arrays.sort(기본타입배열), Arrays.sort(객체타입배열, 정렬조건)
        - 정렬조건 : - 내림차순 Comparator.reverseOrder()  
                     - 오름차순 Comparator.naturalOrder()
            
    - 검색 : 
        - 순차검색 : 배열의 첫번째 요소부터 하나씩 검색
        - 이진검색 : 정렬된 데이터에서 범위를 반복적으로 줄여가면서 검색
    - 배열 비교 : Arrays.equals(배열1, 배열2)

Comparator 와 Comparable   (interface)
    - Comparable : 기본 정렬 기준을 구현하는데 사용
    - Comparator : 기본 정렬기준 외에 다른 기준으로 정렬하고자 할 때 사용