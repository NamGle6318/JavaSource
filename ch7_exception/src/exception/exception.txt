Exception (예외)
발생시점 : 
1) 컴파일 에러 :  

2) 런타임 에러 : 
  a. error : 메모리 부족, 스택오버플로우
  b. exception : 
  https://docs.oracle.com/en/java/javase/23/docs/api/java.base/module-summary.html : java api
        Object
          |
          |
      Throwable
          |
  |--------------------------------------------------------------|
  Exception                                                    Error
      |-IOException
      |-ClassNotFoundException
      |-RuntimeException
                |-ArithmeticException
                |-NullPointerException
                |- *


Exception 처리
1) try-catch 문(if else 느낌)
try {
    예외가 발생할 가능성이 있는 문장
}
catch(Excetpion ex) {
    Exception 발생시 처리하기 위한 문장
}
catch(Excetpion ex1) {
    Exception 발생시 처리하기 위한 문장
}

catch 문 작성시 multi 블럭 가능
catch(Exception | ArithmeticException e)

2) try-catch-finally 
   finally : 예외 발생 여부와 상관없이 반드시 실행되어야 할 코드 (주로 자원의 통로를 닫는 용도로 쓰임)
             ex(입출력스트림, 소켓...) 리소스의 close() 호출 - sc.close()

3) 강제 예외 발생 - Exception 사용
    throw new Exception("출력 문구")

4) 예외 전달
throws Exception;

try-with-resources : 자동 리소스 닫기
+ finally에서 주로 자원 닫기 구문 실행 => 자바 버전 1.7부터 자동 닫기 지원
  finally로 개발자가 자원 닫기를 직접 명시하지 않아도 됨
  try(자동으로 닫아야 하는 객체 생성) {

  } catch(Exception) {

  }